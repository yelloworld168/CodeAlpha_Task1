import java.util.ArrayList;
import java.util.Scanner;
public class StudentGrades 
{
    public static void main(String[] args) 
    {
    ArrayList<Double> grades = new ArrayList<>();
    Scanner scanner = new Scanner(System.in);
    String input;    
    System.out.println("Enter student grades. Type 'done' to finish:");
    while (true) 
    {
        System.out.print("Enter grade (0-100): ");
        input = scanner.nextLine();
        if (input.equalsIgnoreCase("done")) 
        {
            break;
        }
        try 
        {
            double grade = Double.parseDouble(input);
            if (grade < 0 || grade > 100) 
            {
                System.out.println("Grade must be between 0 and 100. Please try again.");
            } 
            else 
            {
                grades.add(grade);
            }
        } 
        catch (NumberFormatException e) 
        {
            System.out.println("Invalid input. Please enter a number.");
        }
    }
    if (grades.isEmpty()) 
    {
        System.out.println("No grades were entered.");
    } 
    else
    {
        double average = calculateAverage(grades);
        double highest = findHighest(grades);
        double lowest = findLowest(grades);
        System.out.printf("Average grade: %.2f%n", average);
        System.out.printf("Highest grade: %.2f%n", highest);
        System.out.printf("Lowest grade: %.2f%n", lowest);
    }
    scanner.close();
   }
    public static double calculateAverage(ArrayList<Double> grades)
    {
    double sum = 0;
    for (double grade : grades) 
    {
    sum += grade;
    }
    return sum / grades.size();
    }
    public static double findHighest(ArrayList<Double> grades) 
    {
    double highest = grades.get(0);
    for (double grade : grades) 
    {
        if (grade > highest) 
        {
            highest = grade;
        }
    }
    return highest;
    }
    public static double findLowest(ArrayList<Double> grades) 
    {
    double lowest = grades.get(0);
    for (double grade : grades) 
    {
        if (grade < lowest) 
        {
            lowest = grade;
        }
    }
    return lowest;
    }
}
